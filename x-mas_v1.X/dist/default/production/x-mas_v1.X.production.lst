

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 19 00:40:02 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.44
    32                           ; Generated 14/09/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4520 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  0004AA                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _tail
    71  0004AA  FA                 	db	low (_data+250)
    72  0004AB  01                 	db	high (_data+250)
    73                           
    74                           ;initializer for _now
    75  0004AC  00                 	db	low _data
    76  0004AD  01                 	db	high _data
    77                           
    78                           	psect	idataBANK1
    79  0000CA                     __pidataBANK1:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _data
    83  0000CA  57                 	db	87
    84  0000CB  65                 	db	101
    85  0000CC  6C                 	db	108
    86  0000CD  63                 	db	99
    87  0000CE  6F                 	db	111
    88  0000CF  6D                 	db	109
    89  0000D0  65                 	db	101
    90  0000D1  20                 	db	32
    91  0000D2  74                 	db	116
    92  0000D3  6F                 	db	111
    93  0000D4  20                 	db	32
    94  0000D5  54                 	db	84
    95  0000D6  72                 	db	114
    96  0000D7  61                 	db	97
    97  0000D8  6E                 	db	110
    98  0000D9  73                 	db	115
    99  0000DA  4C                 	db	76
   100  0000DB  6F                 	db	111
   101  0000DC  76                 	db	118
   102  0000DD  65                 	db	101
   103  0000DE  20                 	db	32
   104  0000DF  3C                 	db	60
   105  0000E0  33                 	db	51
   106  0000E1  20                 	db	32
   107  0000E2  3C                 	db	60
   108  0000E3  33                 	db	51
   109  0000E4  20                 	db	32
   110  0000E5  3C                 	db	60
   111  0000E6  33                 	db	51
   112  0000E7  00                 	db	0
   113  0000E8  00                 	db	0
   114  0000E9  00                 	db	0
   115  0000EA  00                 	db	0
   116  0000EB  00                 	db	0
   117  0000EC  00                 	db	0
   118  0000ED  00                 	db	0
   119  0000EE  00                 	db	0
   120  0000EF  00                 	db	0
   121  0000F0  00                 	db	0
   122  0000F1  00                 	db	0
   123  0000F2  00                 	db	0
   124  0000F3  00                 	db	0
   125  0000F4  00                 	db	0
   126  0000F5  00                 	db	0
   127  0000F6  00                 	db	0
   128  0000F7  00                 	db	0
   129  0000F8  00                 	db	0
   130  0000F9  00                 	db	0
   131  0000FA  00                 	db	0
   132  0000FB  00                 	db	0
   133  0000FC  00                 	db	0
   134  0000FD  00                 	db	0
   135  0000FE  00                 	db	0
   136  0000FF  00                 	db	0
   137  000100  00                 	db	0
   138  000101  00                 	db	0
   139  000102  00                 	db	0
   140  000103  00                 	db	0
   141  000104  00                 	db	0
   142  000105  00                 	db	0
   143  000106  00                 	db	0
   144  000107  00                 	db	0
   145  000108  00                 	db	0
   146  000109  00                 	db	0
   147  00010A  00                 	db	0
   148  00010B  00                 	db	0
   149  00010C  00                 	db	0
   150  00010D  00                 	db	0
   151  00010E  00                 	db	0
   152  00010F  00                 	db	0
   153  000110  00                 	db	0
   154  000111  00                 	db	0
   155  000112  00                 	db	0
   156  000113  00                 	db	0
   157  000114  00                 	db	0
   158  000115  00                 	db	0
   159  000116  00                 	db	0
   160  000117  00                 	db	0
   161  000118  00                 	db	0
   162  000119  00                 	db	0
   163  00011A  00                 	db	0
   164  00011B  00                 	db	0
   165  00011C  00                 	db	0
   166  00011D  00                 	db	0
   167  00011E  00                 	db	0
   168  00011F  00                 	db	0
   169  000120  00                 	db	0
   170  000121  00                 	db	0
   171  000122  00                 	db	0
   172  000123  00                 	db	0
   173  000124  00                 	db	0
   174  000125  00                 	db	0
   175  000126  00                 	db	0
   176  000127  00                 	db	0
   177  000128  00                 	db	0
   178  000129  00                 	db	0
   179  00012A  00                 	db	0
   180  00012B  00                 	db	0
   181  00012C  00                 	db	0
   182  00012D  00                 	db	0
   183  00012E  00                 	db	0
   184  00012F  00                 	db	0
   185  000130  00                 	db	0
   186  000131  00                 	db	0
   187  000132  00                 	db	0
   188  000133  00                 	db	0
   189  000134  00                 	db	0
   190  000135  00                 	db	0
   191  000136  00                 	db	0
   192  000137  00                 	db	0
   193  000138  00                 	db	0
   194  000139  00                 	db	0
   195  00013A  00                 	db	0
   196  00013B  00                 	db	0
   197  00013C  00                 	db	0
   198  00013D  00                 	db	0
   199  00013E  00                 	db	0
   200  00013F  00                 	db	0
   201  000140  00                 	db	0
   202  000141  00                 	db	0
   203  000142  00                 	db	0
   204  000143  00                 	db	0
   205  000144  00                 	db	0
   206  000145  00                 	db	0
   207  000146  00                 	db	0
   208  000147  00                 	db	0
   209  000148  00                 	db	0
   210  000149  00                 	db	0
   211  00014A  00                 	db	0
   212  00014B  00                 	db	0
   213  00014C  00                 	db	0
   214  00014D  00                 	db	0
   215  00014E  00                 	db	0
   216  00014F  00                 	db	0
   217  000150  00                 	db	0
   218  000151  00                 	db	0
   219  000152  00                 	db	0
   220  000153  00                 	db	0
   221  000154  00                 	db	0
   222  000155  00                 	db	0
   223  000156  00                 	db	0
   224  000157  00                 	db	0
   225  000158  00                 	db	0
   226  000159  00                 	db	0
   227  00015A  00                 	db	0
   228  00015B  00                 	db	0
   229  00015C  00                 	db	0
   230  00015D  00                 	db	0
   231  00015E  00                 	db	0
   232  00015F  00                 	db	0
   233  000160  00                 	db	0
   234  000161  00                 	db	0
   235  000162  00                 	db	0
   236  000163  00                 	db	0
   237  000164  00                 	db	0
   238  000165  00                 	db	0
   239  000166  00                 	db	0
   240  000167  00                 	db	0
   241  000168  00                 	db	0
   242  000169  00                 	db	0
   243  00016A  00                 	db	0
   244  00016B  00                 	db	0
   245  00016C  00                 	db	0
   246  00016D  00                 	db	0
   247  00016E  00                 	db	0
   248  00016F  00                 	db	0
   249  000170  00                 	db	0
   250  000171  00                 	db	0
   251  000172  00                 	db	0
   252  000173  00                 	db	0
   253  000174  00                 	db	0
   254  000175  00                 	db	0
   255  000176  00                 	db	0
   256  000177  00                 	db	0
   257  000178  00                 	db	0
   258  000179  00                 	db	0
   259  00017A  00                 	db	0
   260  00017B  00                 	db	0
   261  00017C  00                 	db	0
   262  00017D  00                 	db	0
   263  00017E  00                 	db	0
   264  00017F  00                 	db	0
   265  000180  00                 	db	0
   266  000181  00                 	db	0
   267  000182  00                 	db	0
   268  000183  00                 	db	0
   269  000184  00                 	db	0
   270  000185  00                 	db	0
   271  000186  00                 	db	0
   272  000187  00                 	db	0
   273  000188  00                 	db	0
   274  000189  00                 	db	0
   275  00018A  00                 	db	0
   276  00018B  00                 	db	0
   277  00018C  00                 	db	0
   278  00018D  00                 	db	0
   279  00018E  00                 	db	0
   280  00018F  00                 	db	0
   281  000190  00                 	db	0
   282  000191  00                 	db	0
   283  000192  00                 	db	0
   284  000193  00                 	db	0
   285  000194  00                 	db	0
   286  000195  00                 	db	0
   287  000196  00                 	db	0
   288  000197  00                 	db	0
   289  000198  00                 	db	0
   290  000199  00                 	db	0
   291  00019A  00                 	db	0
   292  00019B  00                 	db	0
   293  00019C  00                 	db	0
   294  00019D  00                 	db	0
   295  00019E  00                 	db	0
   296  00019F  00                 	db	0
   297  0001A0  00                 	db	0
   298  0001A1  00                 	db	0
   299  0001A2  00                 	db	0
   300  0001A3  00                 	db	0
   301  0001A4  00                 	db	0
   302  0001A5  00                 	db	0
   303  0001A6  00                 	db	0
   304  0001A7  00                 	db	0
   305  0001A8  00                 	db	0
   306  0001A9  00                 	db	0
   307  0001AA  00                 	db	0
   308  0001AB  00                 	db	0
   309  0001AC  00                 	db	0
   310  0001AD  00                 	db	0
   311  0001AE  00                 	db	0
   312  0001AF  00                 	db	0
   313  0001B0  00                 	db	0
   314  0001B1  00                 	db	0
   315  0001B2  00                 	db	0
   316  0001B3  00                 	db	0
   317  0001B4  00                 	db	0
   318  0001B5  00                 	db	0
   319  0001B6  00                 	db	0
   320  0001B7  00                 	db	0
   321  0001B8  00                 	db	0
   322  0001B9  00                 	db	0
   323  0001BA  00                 	db	0
   324  0001BB  00                 	db	0
   325  0001BC  00                 	db	0
   326  0001BD  00                 	db	0
   327  0001BE  00                 	db	0
   328  0001BF  00                 	db	0
   329  0001C0  00                 	db	0
   330  0001C1  00                 	db	0
   331  0001C2  00                 	db	0
   332  0001C3  00                 	db	0
   333  0000                     _INTCONbits	set	4082
   334  0000                     _RCONbits	set	4048
   335  0000                     _IPR1bits	set	3999
   336  0000                     _PIE1bits	set	3997
   337  0000                     _RCSTAbits	set	4011
   338  0000                     _SPBRG	set	4015
   339  0000                     _TXSTAbits	set	4012
   340  0000                     _BAUDCONbits	set	4024
   341  0000                     _TRISCbits	set	3988
   342  0000                     _RCREG	set	4014
   343  0000                     _TXREG	set	4013
   344  0000                     _TRISA	set	3986
   345  0000                     _TRISD	set	3989
   346  0000                     _OSCCONbits	set	4051
   347  0000                     _LATA	set	3977
   348  0000                     _RCIF	set	31989
   349                           
   350                           ; #config settings
   351  0000                     
   352                           	psect	cinit
   353  00034E                     __pcinit:
   354                           	opt stack 0
   355  00034E                     start_initialization:
   356                           	opt stack 0
   357  00034E                     __initialization:
   358                           	opt stack 0
   359                           
   360                           ; Initialize objects allocated to BANK1 (250 bytes)
   361                           ; load TBLPTR registers with __pidataBANK1
   362  00034E  0ECA               	movlw	low __pidataBANK1
   363  000350  6EF6               	movwf	tblptrl,c
   364  000352  0E00               	movlw	high __pidataBANK1
   365  000354  6EF7               	movwf	tblptrh,c
   366  000356  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   367  000358  6EF8               	movwf	tblptru,c
   368  00035A  EE01  F000         	lfsr	0,__pdataBANK1
   369  00035E  EE10 F0FA          	lfsr	1,250
   370  000362                     copy_data0:
   371  000362  0009               	tblrd		*+
   372  000364  CFF5 FFEE          	movff	tablat,postinc0
   373  000368  50E5               	movf	postdec1,w,c
   374  00036A  50E1               	movf	fsr1l,w,c
   375  00036C  E1FA               	bnz	copy_data0
   376                           
   377                           ; Initialize objects allocated to COMRAM (4 bytes)
   378                           ; load TBLPTR registers with __pidataCOMRAM
   379  00036E  0EAA               	movlw	low __pidataCOMRAM
   380  000370  6EF6               	movwf	tblptrl,c
   381  000372  0E04               	movlw	high __pidataCOMRAM
   382  000374  6EF7               	movwf	tblptrh,c
   383  000376  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   384  000378  6EF8               	movwf	tblptru,c
   385  00037A  EE00  F035         	lfsr	0,__pdataCOMRAM
   386  00037E  EE10 F004          	lfsr	1,4
   387  000382                     copy_data1:
   388  000382  0009               	tblrd		*+
   389  000384  CFF5 FFEE          	movff	tablat,postinc0
   390  000388  50E5               	movf	postdec1,w,c
   391  00038A  50E1               	movf	fsr1l,w,c
   392  00038C  E1FA               	bnz	copy_data1
   393                           
   394                           ; Clear objects allocated to COMRAM (1 bytes)
   395  00038E  6A39               	clrf	__pbssCOMRAM& (0+255),c
   396  000390                     end_of_initialization:
   397                           	opt stack 0
   398  000390                     __end_of__initialization:
   399                           	opt stack 0
   400  000390  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   401  000392  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   402  000394  0100               	movlb	0
   403  000396  EF17  F002         	goto	_main	;jump to C main() function
   404                           tblptru	equ	0xFF8
   405                           tblptrh	equ	0xFF7
   406                           tblptrl	equ	0xFF6
   407                           tablat	equ	0xFF5
   408                           postinc0	equ	0xFEE
   409                           postdec1	equ	0xFE5
   410                           fsr1l	equ	0xFE1
   411                           
   412                           	psect	bssCOMRAM
   413  000039                     __pbssCOMRAM:
   414                           	opt stack 0
   415  000039                     _temp:
   416                           	opt stack 0
   417  000039                     	ds	1
   418                           tblptru	equ	0xFF8
   419                           tblptrh	equ	0xFF7
   420                           tblptrl	equ	0xFF6
   421                           tablat	equ	0xFF5
   422                           postinc0	equ	0xFEE
   423                           postdec1	equ	0xFE5
   424                           fsr1l	equ	0xFE1
   425                           
   426                           	psect	dataCOMRAM
   427  000035                     __pdataCOMRAM:
   428                           	opt stack 0
   429  000035                     _tail:
   430                           	opt stack 0
   431  000035                     	ds	2
   432  000037                     _now:
   433                           	opt stack 0
   434  000037                     	ds	2
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           postdec1	equ	0xFE5
   441                           fsr1l	equ	0xFE1
   442                           
   443                           	psect	dataBANK1
   444  000100                     __pdataBANK1:
   445                           	opt stack 0
   446  000100                     _data:
   447                           	opt stack 0
   448  000100                     	ds	250
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           postdec1	equ	0xFE5
   455                           fsr1l	equ	0xFE1
   456                           
   457                           	psect	cstackCOMRAM
   458  000001                     __pcstackCOMRAM:
   459                           	opt stack 0
   460  000001                     ?i2_next:
   461                           	opt stack 0
   462  000001                     UART_WRITE@output:
   463                           	opt stack 0
   464  000001                     i2next@ptr:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x0
   468  000001                     	ds	2
   469  000003                     i2add_word@c:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x2
   473  000003                     	ds	1
   474  000004                     ??_ISR_HIGH:
   475                           
   476                           ; 1 bytes @ 0x3
   477  000004                     	ds	18
   478  000016                     ??_ISR_LOW:
   479                           
   480                           ; 1 bytes @ 0x15
   481  000016                     	ds	21
   482  00002B                     ?_next:
   483                           	opt stack 0
   484  00002B                     next@ptr:
   485                           	opt stack 0
   486  00002B                     test@bright:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0x2A
   490  00002B                     	ds	2
   491  00002D                     add_word@c:
   492                           	opt stack 0
   493  00002D                     show_words@bright:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x2C
   497  00002D                     	ds	1
   498  00002E                     
   499                           ; 1 bytes @ 0x2D
   500  00002E                     	ds	1
   501  00002F                     show_words@dark:
   502                           	opt stack 0
   503  00002F                     test@dark:
   504                           	opt stack 0
   505                           
   506                           ; 4 bytes @ 0x2E
   507  00002F                     	ds	2
   508  000031                     show_words@iter:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x30
   512  000031                     	ds	2
   513  000033                     show_words@i:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x32
   517  000033                     	ds	2
   518  000035                     tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           ; 1 bytes @ 0x34
   527 ;;
   528 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   529 ;;
   530 ;; *************** function _main *****************
   531 ;; Defined at:
   532 ;;		line 47 in file "main.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;		None
   535 ;; Auto vars:     Size  Location     Type
   536 ;;		None
   537 ;; Return value:  Size  Location     Type
   538 ;;                  1    wreg      void 
   539 ;; Registers used:
   540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   546 ;;      Params:         0       0       0       0       0       0       0
   547 ;;      Locals:         0       0       0       0       0       0       0
   548 ;;      Temps:          0       0       0       0       0       0       0
   549 ;;      Totals:         0       0       0       0       0       0       0
   550 ;;Total ram usage:        0 bytes
   551 ;; Hardware stack levels required when called:    8
   552 ;; This function calls:
   553 ;;		_ISR_INIT
   554 ;;		_LED_DISP
   555 ;;		_UART_INIT
   556 ;;		_show_words
   557 ;;		_test
   558 ;; This function is called by:
   559 ;;		Startup code after reset
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           	psect	text0
   564  00042E                     __ptext0:
   565                           	opt stack 0
   566  00042E                     _main:
   567                           	opt stack 23
   568                           
   569                           ;main.c: 49: OSCCONbits.IRCF = 0x7;
   570                           
   571                           ;incstack = 0
   572  00042E  88D3               	bsf	4051,4,c	;volatile
   573  000430  8AD3               	bsf	4051,5,c	;volatile
   574  000432  8CD3               	bsf	4051,6,c	;volatile
   575                           
   576                           ;main.c: 52: TRISD = 0;
   577  000434  0E00               	movlw	0
   578  000436  6E95               	movwf	3989,c	;volatile
   579                           
   580                           ;main.c: 53: TRISA = 0;
   581  000438  0E00               	movlw	0
   582  00043A  6E92               	movwf	3986,c	;volatile
   583                           
   584                           ;main.c: 56: UART_INIT();
   585  00043C  EC38  F002         	call	_UART_INIT	;wreg free
   586                           
   587                           ;main.c: 57: ISR_INIT();
   588  000440  EC4D  F002         	call	_ISR_INIT	;wreg free
   589  000444                     
   590                           ;main.c: 59: test();
   591  000444  EC71  F001         	call	_test	;wreg free
   592  000448  D7FD               	goto	l64
   593  00044A                     l67:
   594                           
   595                           ;main.c: 63: show_words();
   596  00044A  EC35  F001         	call	_show_words	;wreg free
   597  00044E  D7FD               	goto	l67
   598  000450                     __end_of_main:
   599                           	opt stack 0
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           postdec1	equ	0xFE5
   606                           fsr1l	equ	0xFE1
   607                           
   608 ;; *************** function _test *****************
   609 ;; Defined at:
   610 ;;		line 38 in file "main.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;  dark            4   46[COMRAM] long 
   615 ;;  bright          4   42[COMRAM] long 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, status,2, status,0
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   625 ;;      Params:         0       0       0       0       0       0       0
   626 ;;      Locals:         8       0       0       0       0       0       0
   627 ;;      Temps:          0       0       0       0       0       0       0
   628 ;;      Totals:         8       0       0       0       0       0       0
   629 ;;Total ram usage:        8 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:    5
   632 ;; This function calls:
   633 ;;		Nothing
   634 ;; This function is called by:
   635 ;;		_main
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text1
   640  0002E2                     __ptext1:
   641                           	opt stack 0
   642  0002E2                     _test:
   643                           	opt stack 25
   644                           
   645                           ;main.c: 39: LATA = 0xFF;
   646                           
   647                           ;incstack = 0
   648  0002E2  6889               	setf	3977,c	;volatile
   649                           
   650                           ;main.c: 40: long int bright = 200;
   651  0002E4  0EC8               	movlw	200
   652  0002E6  6E2B               	movwf	test@bright,c
   653  0002E8  0E00               	movlw	0
   654  0002EA  6E2C               	movwf	test@bright+1,c
   655  0002EC  0E00               	movlw	0
   656  0002EE  6E2D               	movwf	test@bright+2,c
   657  0002F0  0E00               	movlw	0
   658  0002F2  6E2E               	movwf	test@bright+3,c
   659  0002F4                     l769:
   660  0002F4  0EFF               	movlw	255
   661  0002F6  262B               	addwf	test@bright,f,c
   662  0002F8  0EFF               	movlw	255
   663  0002FA  222C               	addwfc	test@bright+1,f,c
   664  0002FC  0EFF               	movlw	255
   665  0002FE  222D               	addwfc	test@bright+2,f,c
   666  000300  0EFF               	movlw	255
   667  000302  222E               	addwfc	test@bright+3,f,c
   668  000304  282B               	incf	test@bright,w,c
   669  000306  E1F6               	bnz	l769
   670  000308  282C               	incf	test@bright+1,w,c
   671  00030A  E1F4               	bnz	l769
   672  00030C  282D               	incf	test@bright+2,w,c
   673  00030E  E1F2               	bnz	l769
   674  000310  282E               	incf	test@bright+3,w,c
   675  000312  A4D8               	btfss	status,2,c
   676  000314  D7EF               	goto	l54
   677                           
   678                           ;main.c: 42: LATA = 0;
   679  000316  0E00               	movlw	0
   680  000318  6E89               	movwf	3977,c	;volatile
   681                           
   682                           ;main.c: 43: long int dark = 18000;
   683  00031A  0E50               	movlw	80
   684  00031C  6E2F               	movwf	test@dark,c
   685  00031E  0E46               	movlw	70
   686  000320  6E30               	movwf	test@dark+1,c
   687  000322  0E00               	movlw	0
   688  000324  6E31               	movwf	test@dark+2,c
   689  000326  0E00               	movlw	0
   690  000328  6E32               	movwf	test@dark+3,c
   691  00032A                     l773:
   692  00032A  0EFF               	movlw	255
   693  00032C  262F               	addwf	test@dark,f,c
   694  00032E  0EFF               	movlw	255
   695  000330  2230               	addwfc	test@dark+1,f,c
   696  000332  0EFF               	movlw	255
   697  000334  2231               	addwfc	test@dark+2,f,c
   698  000336  0EFF               	movlw	255
   699  000338  2232               	addwfc	test@dark+3,f,c
   700  00033A  282F               	incf	test@dark,w,c
   701  00033C  E1F6               	bnz	l773
   702  00033E  2830               	incf	test@dark+1,w,c
   703  000340  E1F4               	bnz	l773
   704  000342  2831               	incf	test@dark+2,w,c
   705  000344  E1F2               	bnz	l773
   706  000346  2832               	incf	test@dark+3,w,c
   707  000348  B4D8               	btfsc	status,2,c
   708  00034A  0012               	return	
   709  00034C  D7EE               	goto	l57
   710  00034E                     __end_of_test:
   711                           	opt stack 0
   712                           tblptru	equ	0xFF8
   713                           tblptrh	equ	0xFF7
   714                           tblptrl	equ	0xFF6
   715                           tablat	equ	0xFF5
   716                           postinc0	equ	0xFEE
   717                           postdec1	equ	0xFE5
   718                           fsr1l	equ	0xFE1
   719                           status	equ	0xFD8
   720                           
   721 ;; *************** function _show_words *****************
   722 ;; Defined at:
   723 ;;		line 67 in file "main.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  dark            2   46[COMRAM] int 
   728 ;;  bright          2   44[COMRAM] int 
   729 ;;  i               2   50[COMRAM] int 
   730 ;;  iter            2   48[COMRAM] PTR unsigned char 
   731 ;;		 -> data(250), 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      void 
   734 ;; Registers used:
   735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   741 ;;      Params:         0       0       0       0       0       0       0
   742 ;;      Locals:         8       0       0       0       0       0       0
   743 ;;      Temps:          0       0       0       0       0       0       0
   744 ;;      Totals:         8       0       0       0       0       0       0
   745 ;;Total ram usage:        8 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; Hardware stack levels required when called:    6
   748 ;; This function calls:
   749 ;;		_next
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text2
   756  00026A                     __ptext2:
   757                           	opt stack 0
   758  00026A                     _show_words:
   759                           	opt stack 24
   760                           
   761                           ;main.c: 68: char* iter = now;
   762                           
   763                           ;incstack = 0
   764  00026A  C037  F031         	movff	_now,show_words@iter
   765  00026E  C038  F032         	movff	_now+1,show_words@iter+1
   766                           
   767                           ;main.c: 69: for(int i = 0; i < 250; ++i){
   768  000272  0E00               	movlw	0
   769  000274  6E34               	movwf	show_words@i+1,c
   770  000276  0E00               	movlw	0
   771  000278  6E33               	movwf	show_words@i,c
   772  00027A                     l889:
   773  00027A  BE34               	btfsc	show_words@i+1,7,c
   774  00027C  D006               	goto	l73
   775  00027E  5034               	movf	show_words@i+1,w,c
   776  000280  E12F               	bnz	l81
   777  000282  0EFA               	movlw	250
   778  000284  5C33               	subwf	show_words@i,w,c
   779  000286  B0D8               	btfsc	status,0,c
   780  000288  0012               	return	
   781  00028A                     l73:
   782                           
   783                           ;main.c: 70: LATA = *iter;
   784  00028A  C031  FFD9         	movff	show_words@iter,fsr2l
   785  00028E  C032  FFDA         	movff	show_words@iter+1,fsr2h
   786  000292  50DF               	movf	indf2,w,c
   787  000294  6E89               	movwf	3977,c	;volatile
   788                           
   789                           ;main.c: 71: int bright = 50;
   790  000296  0E00               	movlw	0
   791  000298  6E2E               	movwf	show_words@bright+1,c
   792  00029A  0E32               	movlw	50
   793  00029C  6E2D               	movwf	show_words@bright,c
   794  00029E                     l897:
   795  00029E  062D               	decf	show_words@bright,f,c
   796  0002A0  A0D8               	btfss	status,0,c
   797  0002A2  062E               	decf	show_words@bright+1,f,c
   798  0002A4  282D               	incf	show_words@bright,w,c
   799  0002A6  E1FB               	bnz	l897
   800  0002A8  282E               	incf	show_words@bright+1,w,c
   801  0002AA  A4D8               	btfss	status,2,c
   802  0002AC  D7F8               	goto	l76
   803                           
   804                           ;main.c: 73: int dark = 50;
   805  0002AE  0E00               	movlw	0
   806  0002B0  6E30               	movwf	show_words@dark+1,c
   807  0002B2  0E32               	movlw	50
   808  0002B4  6E2F               	movwf	show_words@dark,c
   809  0002B6                     l901:
   810  0002B6  062F               	decf	show_words@dark,f,c
   811  0002B8  A0D8               	btfss	status,0,c
   812  0002BA  0630               	decf	show_words@dark+1,f,c
   813  0002BC  282F               	incf	show_words@dark,w,c
   814  0002BE  E1FB               	bnz	l901
   815  0002C0  2830               	incf	show_words@dark+1,w,c
   816  0002C2  A4D8               	btfss	status,2,c
   817  0002C4  D7F8               	goto	l79
   818                           
   819                           ;main.c: 75: iter = next(iter);
   820  0002C6  C031  F02B         	movff	show_words@iter,next@ptr
   821  0002CA  C032  F02C         	movff	show_words@iter+1,next@ptr+1
   822  0002CE  ECCD  F001         	call	_next	;wreg free
   823  0002D2  C02B  F031         	movff	?_next,show_words@iter
   824  0002D6  C02C  F032         	movff	?_next+1,show_words@iter+1
   825  0002DA  4A33               	infsnz	show_words@i,f,c
   826  0002DC  2A34               	incf	show_words@i+1,f,c
   827  0002DE  D7CD               	goto	l889
   828  0002E0                     l81:
   829  0002E0  0012               	return		;funcret
   830  0002E2                     __end_of_show_words:
   831                           	opt stack 0
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           postinc0	equ	0xFEE
   837                           postdec1	equ	0xFE5
   838                           fsr1l	equ	0xFE1
   839                           indf2	equ	0xFDF
   840                           fsr2h	equ	0xFDA
   841                           fsr2l	equ	0xFD9
   842                           status	equ	0xFD8
   843                           
   844 ;; *************** function _UART_INIT *****************
   845 ;; Defined at:
   846 ;;		line 112 in file "main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		wreg, status,2
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   860 ;;      Params:         0       0       0       0       0       0       0
   861 ;;      Locals:         0       0       0       0       0       0       0
   862 ;;      Temps:          0       0       0       0       0       0       0
   863 ;;      Totals:         0       0       0       0       0       0       0
   864 ;;Total ram usage:        0 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; Hardware stack levels required when called:    5
   867 ;; This function calls:
   868 ;;		Nothing
   869 ;; This function is called by:
   870 ;;		_main
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text3
   875  000470                     __ptext3:
   876                           	opt stack 0
   877  000470                     _UART_INIT:
   878                           	opt stack 25
   879                           
   880                           ;main.c: 114: TRISCbits.TRISC6 = 1;
   881                           
   882                           ;incstack = 0
   883  000470  8C94               	bsf	3988,6,c	;volatile
   884                           
   885                           ;main.c: 115: TRISCbits.TRISC7 = 1;
   886  000472  8E94               	bsf	3988,7,c	;volatile
   887                           
   888                           ;main.c: 118: BAUDCONbits.BRG16 = 0;
   889  000474  96B8               	bcf	4024,3,c	;volatile
   890                           
   891                           ;main.c: 119: TXSTAbits.BRGH = 1;
   892  000476  84AC               	bsf	4012,2,c	;volatile
   893                           
   894                           ;main.c: 120: SPBRG = 25;
   895  000478  0E19               	movlw	25
   896  00047A  6EAF               	movwf	4015,c	;volatile
   897                           
   898                           ;main.c: 123: TXSTAbits.SYNC = 0;
   899  00047C  98AC               	bcf	4012,4,c	;volatile
   900                           
   901                           ;main.c: 126: RCSTAbits.SPEN = 1;
   902  00047E  8EAB               	bsf	4011,7,c	;volatile
   903                           
   904                           ;main.c: 129: TXSTAbits.TXEN = 1;
   905  000480  8AAC               	bsf	4012,5,c	;volatile
   906                           
   907                           ;main.c: 130: RCSTAbits.CREN = 1;
   908  000482  88AB               	bsf	4011,4,c	;volatile
   909                           
   910                           ;main.c: 133: PIE1bits.TXIE = 0;
   911  000484  989D               	bcf	3997,4,c	;volatile
   912                           
   913                           ;main.c: 134: IPR1bits.TXIP = 1;
   914  000486  889F               	bsf	3999,4,c	;volatile
   915                           
   916                           ;main.c: 135: PIE1bits.RCIE = 1;
   917  000488  8A9D               	bsf	3997,5,c	;volatile
   918                           
   919                           ;main.c: 136: IPR1bits.RCIP = 1;
   920  00048A  8A9F               	bsf	3999,5,c	;volatile
   921  00048C  0012               	return		;funcret
   922  00048E                     __end_of_UART_INIT:
   923                           	opt stack 0
   924                           tblptru	equ	0xFF8
   925                           tblptrh	equ	0xFF7
   926                           tblptrl	equ	0xFF6
   927                           tablat	equ	0xFF5
   928                           postinc0	equ	0xFEE
   929                           postdec1	equ	0xFE5
   930                           fsr1l	equ	0xFE1
   931                           indf2	equ	0xFDF
   932                           fsr2h	equ	0xFDA
   933                           fsr2l	equ	0xFD9
   934                           status	equ	0xFD8
   935                           
   936 ;; *************** function _LED_DISP *****************
   937 ;; Defined at:
   938 ;;		line 90 in file "main.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   952 ;;      Params:         0       0       0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0       0       0
   955 ;;      Totals:         0       0       0       0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    7
   959 ;; This function calls:
   960 ;;		_add_word
   961 ;; This function is called by:
   962 ;;		_main
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text4
   967  000450                     __ptext4:
   968                           	opt stack 0
   969  000450                     _LED_DISP:
   970                           	opt stack 23
   971                           
   972                           ;main.c: 91: add_word((char)255);
   973                           
   974                           ;incstack = 0
   975  000450  0EFF               	movlw	255
   976  000452  ECF3  F001         	call	_add_word
   977                           
   978                           ;main.c: 92: add_word((char)255);
   979  000456  0EFF               	movlw	255
   980  000458  ECF3  F001         	call	_add_word
   981                           
   982                           ;main.c: 93: add_word((char)200);
   983  00045C  0EC8               	movlw	200
   984  00045E  ECF3  F001         	call	_add_word
   985                           
   986                           ;main.c: 94: add_word((char)128);
   987  000462  0E80               	movlw	128
   988  000464  ECF3  F001         	call	_add_word
   989                           
   990                           ;main.c: 95: add_word((char)64);
   991  000468  0E40               	movlw	64
   992  00046A  ECF3  F001         	call	_add_word
   993  00046E  0012               	return		;funcret
   994  000470                     __end_of_LED_DISP:
   995                           	opt stack 0
   996                           tblptru	equ	0xFF8
   997                           tblptrh	equ	0xFF7
   998                           tblptrl	equ	0xFF6
   999                           tablat	equ	0xFF5
  1000                           postinc0	equ	0xFEE
  1001                           postdec1	equ	0xFE5
  1002                           fsr1l	equ	0xFE1
  1003                           indf2	equ	0xFDF
  1004                           fsr2h	equ	0xFDA
  1005                           fsr2l	equ	0xFD9
  1006                           status	equ	0xFD8
  1007                           
  1008 ;; *************** function _add_word *****************
  1009 ;; Defined at:
  1010 ;;		line 79 in file "main.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  c               1    wreg     unsigned char 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  c               1   44[COMRAM] unsigned char 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1024 ;;      Params:         0       0       0       0       0       0       0
  1025 ;;      Locals:         1       0       0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0       0       0
  1027 ;;      Totals:         1       0       0       0       0       0       0
  1028 ;;Total ram usage:        1 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    6
  1031 ;; This function calls:
  1032 ;;		_next
  1033 ;; This function is called by:
  1034 ;;		_LED_DISP
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text5
  1039  0003E6                     __ptext5:
  1040                           	opt stack 0
  1041  0003E6                     _add_word:
  1042                           	opt stack 23
  1043                           
  1044                           ;incstack = 0
  1045                           ;add_word@c stored from wreg
  1046  0003E6  6E2D               	movwf	add_word@c,c
  1047                           
  1048                           ;main.c: 80: *now = c;
  1049  0003E8  C037  FFD9         	movff	_now,fsr2l
  1050  0003EC  C038  FFDA         	movff	_now+1,fsr2h
  1051  0003F0  C02D  FFDF         	movff	add_word@c,indf2
  1052                           
  1053                           ;main.c: 81: now = next(now);
  1054  0003F4  C037  F02B         	movff	_now,next@ptr
  1055  0003F8  C038  F02C         	movff	_now+1,next@ptr+1
  1056  0003FC  ECCD  F001         	call	_next	;wreg free
  1057  000400  C02B  F037         	movff	?_next,_now
  1058  000404  C02C  F038         	movff	?_next+1,_now+1
  1059  000408  0012               	return		;funcret
  1060  00040A                     __end_of_add_word:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           postdec1	equ	0xFE5
  1068                           fsr1l	equ	0xFE1
  1069                           indf2	equ	0xFDF
  1070                           fsr2h	equ	0xFDA
  1071                           fsr2l	equ	0xFD9
  1072                           status	equ	0xFD8
  1073                           
  1074 ;; *************** function _next *****************
  1075 ;; Defined at:
  1076 ;;		line 84 in file "main.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  ptr             2   42[COMRAM] PTR unsigned char 
  1079 ;;		 -> data(250), 
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  2   42[COMRAM] PTR unsigned char 
  1084 ;; Registers used:
  1085 ;;		wreg, status,2, status,0
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1091 ;;      Params:         2       0       0       0       0       0       0
  1092 ;;      Locals:         0       0       0       0       0       0       0
  1093 ;;      Temps:          0       0       0       0       0       0       0
  1094 ;;      Totals:         2       0       0       0       0       0       0
  1095 ;;Total ram usage:        2 bytes
  1096 ;; Hardware stack levels used:    1
  1097 ;; Hardware stack levels required when called:    5
  1098 ;; This function calls:
  1099 ;;		Nothing
  1100 ;; This function is called by:
  1101 ;;		_show_words
  1102 ;;		_add_word
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           	psect	text6
  1107  00039A                     __ptext6:
  1108                           	opt stack 0
  1109  00039A                     _next:
  1110                           	opt stack 24
  1111                           
  1112                           ;main.c: 85: if(++ptr == tail)
  1113                           
  1114                           ;incstack = 0
  1115  00039A  4A2B               	infsnz	next@ptr,f,c
  1116  00039C  2A2C               	incf	next@ptr+1,f,c
  1117  00039E  5035               	movf	_tail,w,c
  1118  0003A0  182B               	xorwf	next@ptr,w,c
  1119  0003A2  E109               	bnz	l861
  1120  0003A4  5036               	movf	_tail+1,w,c
  1121  0003A6  182C               	xorwf	next@ptr+1,w,c
  1122  0003A8  A4D8               	btfss	status,2,c
  1123  0003AA  D005               	goto	l87
  1124                           
  1125                           ;main.c: 86: return (char*)data;
  1126  0003AC  0E00               	movlw	low _data
  1127  0003AE  6E2B               	movwf	?_next,c
  1128  0003B0  0E01               	movlw	high _data
  1129  0003B2  6E2C               	movwf	?_next+1,c
  1130  0003B4  0012               	return	
  1131  0003B6                     l87:
  1132  0003B6                     l861:
  1133                           
  1134                           ;main.c: 87: return ptr;
  1135  0003B6  C02B  F02B         	movff	next@ptr,?_next
  1136  0003BA  C02C  F02C         	movff	next@ptr+1,?_next+1
  1137  0003BE  0012               	return	
  1138  0003C0                     __end_of_next:
  1139                           	opt stack 0
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           postdec1	equ	0xFE5
  1146                           fsr1l	equ	0xFE1
  1147                           indf2	equ	0xFDF
  1148                           fsr2h	equ	0xFDA
  1149                           fsr2l	equ	0xFD9
  1150                           status	equ	0xFD8
  1151                           
  1152 ;; *************** function _ISR_INIT *****************
  1153 ;; Defined at:
  1154 ;;		line 139 in file "main.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		None
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1168 ;;      Params:         0       0       0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0       0       0
  1171 ;;      Totals:         0       0       0       0       0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    5
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text7
  1183  00049A                     __ptext7:
  1184                           	opt stack 0
  1185  00049A                     _ISR_INIT:
  1186                           	opt stack 25
  1187                           
  1188                           ;main.c: 140: RCONbits.IPEN = 1;
  1189                           
  1190                           ;incstack = 0
  1191  00049A  8ED0               	bsf	4048,7,c	;volatile
  1192                           
  1193                           ;main.c: 141: INTCONbits.GIEH = 1;
  1194  00049C  8EF2               	bsf	intcon,7,c	;volatile
  1195                           
  1196                           ;main.c: 142: INTCONbits.GIEL = 1;
  1197  00049E  8CF2               	bsf	intcon,6,c	;volatile
  1198                           
  1199                           ;main.c: 143: return;
  1200  0004A0  0012               	return		;funcret
  1201  0004A2                     __end_of_ISR_INIT:
  1202                           	opt stack 0
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           intcon	equ	0xFF2
  1208                           postinc0	equ	0xFEE
  1209                           postdec1	equ	0xFE5
  1210                           fsr1l	equ	0xFE1
  1211                           indf2	equ	0xFDF
  1212                           fsr2h	equ	0xFDA
  1213                           fsr2l	equ	0xFD9
  1214                           status	equ	0xFD8
  1215                           
  1216 ;; *************** function _ISR_LOW *****************
  1217 ;; Defined at:
  1218 ;;		line 157 in file "main.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		None
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1232 ;;      Params:         0       0       0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0       0       0
  1234 ;;      Temps:         21       0       0       0       0       0       0
  1235 ;;      Totals:        21       0       0       0       0       0       0
  1236 ;;Total ram usage:       21 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    4
  1239 ;; This function calls:
  1240 ;;		Nothing
  1241 ;; This function is called by:
  1242 ;;		Interrupt level 1
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	intcodelo
  1247  000018                     __pintcodelo:
  1248                           	opt stack 0
  1249  000018                     _ISR_LOW:
  1250                           	opt stack 23
  1251                           
  1252                           ;incstack = 0
  1253  000018  803A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1254  00001A  CFD8 F016          	movff	status,??_ISR_LOW
  1255  00001E  CFE8 F017          	movff	wreg,??_ISR_LOW+1
  1256  000022  CFE0 F018          	movff	bsr,??_ISR_LOW+2
  1257  000026  CFFA F019          	movff	pclath,??_ISR_LOW+3
  1258  00002A  CFFB F01A          	movff	pclatu,??_ISR_LOW+4
  1259  00002E  CFE9 F01B          	movff	fsr0l,??_ISR_LOW+5
  1260  000032  CFEA F01C          	movff	fsr0h,??_ISR_LOW+6
  1261  000036  CFE1 F01D          	movff	fsr1l,??_ISR_LOW+7
  1262  00003A  CFE2 F01E          	movff	fsr1h,??_ISR_LOW+8
  1263  00003E  CFD9 F01F          	movff	fsr2l,??_ISR_LOW+9
  1264  000042  CFDA F020          	movff	fsr2h,??_ISR_LOW+10
  1265  000046  CFF3 F021          	movff	prodl,??_ISR_LOW+11
  1266  00004A  CFF4 F022          	movff	prodh,??_ISR_LOW+12
  1267  00004E  CFF6 F023          	movff	tblptrl,??_ISR_LOW+13
  1268  000052  CFF7 F024          	movff	tblptrh,??_ISR_LOW+14
  1269  000056  CFF8 F025          	movff	tblptru,??_ISR_LOW+15
  1270  00005A  CFF5 F026          	movff	tablat,??_ISR_LOW+16
  1271  00005E  C03A  F027         	movff	btemp,??_ISR_LOW+17
  1272  000062  C03B  F028         	movff	btemp+1,??_ISR_LOW+18
  1273  000066  C03C  F029         	movff	btemp+2,??_ISR_LOW+19
  1274  00006A  C03D  F02A         	movff	btemp+3,??_ISR_LOW+20
  1275                           
  1276                           ;main.c: 158: return;
  1277  00006E  C02A  F03D         	movff	??_ISR_LOW+20,btemp+3
  1278  000072  C029  F03C         	movff	??_ISR_LOW+19,btemp+2
  1279  000076  C028  F03B         	movff	??_ISR_LOW+18,btemp+1
  1280  00007A  C027  F03A         	movff	??_ISR_LOW+17,btemp
  1281  00007E  C026  FFF5         	movff	??_ISR_LOW+16,tablat
  1282  000082  C025  FFF8         	movff	??_ISR_LOW+15,tblptru
  1283  000086  C024  FFF7         	movff	??_ISR_LOW+14,tblptrh
  1284  00008A  C023  FFF6         	movff	??_ISR_LOW+13,tblptrl
  1285  00008E  C022  FFF4         	movff	??_ISR_LOW+12,prodh
  1286  000092  C021  FFF3         	movff	??_ISR_LOW+11,prodl
  1287  000096  C020  FFDA         	movff	??_ISR_LOW+10,fsr2h
  1288  00009A  C01F  FFD9         	movff	??_ISR_LOW+9,fsr2l
  1289  00009E  C01E  FFE2         	movff	??_ISR_LOW+8,fsr1h
  1290  0000A2  C01D  FFE1         	movff	??_ISR_LOW+7,fsr1l
  1291  0000A6  C01C  FFEA         	movff	??_ISR_LOW+6,fsr0h
  1292  0000AA  C01B  FFE9         	movff	??_ISR_LOW+5,fsr0l
  1293  0000AE  C01A  FFFB         	movff	??_ISR_LOW+4,pclatu
  1294  0000B2  C019  FFFA         	movff	??_ISR_LOW+3,pclath
  1295  0000B6  C018  FFE0         	movff	??_ISR_LOW+2,bsr
  1296  0000BA  C017  FFE8         	movff	??_ISR_LOW+1,wreg
  1297  0000BE  C016  FFD8         	movff	??_ISR_LOW,status
  1298  0000C2  903A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1299  0000C4  0010               	retfie	
  1300  0000C6                     __end_of_ISR_LOW:
  1301                           	opt stack 0
  1302                           pclatu	equ	0xFFB
  1303                           pclath	equ	0xFFA
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           prodh	equ	0xFF4
  1309                           prodl	equ	0xFF3
  1310                           intcon	equ	0xFF2
  1311                           postinc0	equ	0xFEE
  1312                           fsr0h	equ	0xFEA
  1313                           fsr0l	equ	0xFE9
  1314                           wreg	equ	0xFE8
  1315                           postdec1	equ	0xFE5
  1316                           fsr1h	equ	0xFE2
  1317                           fsr1l	equ	0xFE1
  1318                           bsr	equ	0xFE0
  1319                           indf2	equ	0xFDF
  1320                           fsr2h	equ	0xFDA
  1321                           fsr2l	equ	0xFD9
  1322                           status	equ	0xFD8
  1323                           
  1324 ;; *************** function _ISR_HIGH *****************
  1325 ;; Defined at:
  1326 ;;		line 146 in file "main.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;		None
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;		None
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1340 ;;      Params:         0       0       0       0       0       0       0
  1341 ;;      Locals:         0       0       0       0       0       0       0
  1342 ;;      Temps:         18       0       0       0       0       0       0
  1343 ;;      Totals:        18       0       0       0       0       0       0
  1344 ;;Total ram usage:       18 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    3
  1347 ;; This function calls:
  1348 ;;		_UART_READ
  1349 ;;		_UART_WRITE
  1350 ;; This function is called by:
  1351 ;;		Interrupt level 2
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	intcode
  1356  000008                     __pintcode:
  1357                           	opt stack 0
  1358  000008                     _ISR_HIGH:
  1359                           	opt stack 23
  1360                           
  1361                           ;incstack = 0
  1362  000008  823A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1363  00000A  EDE2  F000         	call	int_func,f	;refresh shadow registers
  1364                           pclatu	equ	0xFFB
  1365                           pclath	equ	0xFFA
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           prodh	equ	0xFF4
  1371                           prodl	equ	0xFF3
  1372                           intcon	equ	0xFF2
  1373                           postinc0	equ	0xFEE
  1374                           fsr0h	equ	0xFEA
  1375                           fsr0l	equ	0xFE9
  1376                           wreg	equ	0xFE8
  1377                           postdec1	equ	0xFE5
  1378                           fsr1h	equ	0xFE2
  1379                           fsr1l	equ	0xFE1
  1380                           bsr	equ	0xFE0
  1381                           indf2	equ	0xFDF
  1382                           fsr2h	equ	0xFDA
  1383                           fsr2l	equ	0xFD9
  1384                           status	equ	0xFD8
  1385                           
  1386                           	psect	intcode_body
  1387  0001C4                     __pintcode_body:
  1388                           	opt stack 23
  1389  0001C4                     int_func:
  1390                           	opt stack 23
  1391  0001C4  0006               	pop		; remove dummy address from shadow register refresh
  1392  0001C6  CFFA F004          	movff	pclath,??_ISR_HIGH
  1393  0001CA  CFFB F005          	movff	pclatu,??_ISR_HIGH+1
  1394  0001CE  CFE9 F006          	movff	fsr0l,??_ISR_HIGH+2
  1395  0001D2  CFEA F007          	movff	fsr0h,??_ISR_HIGH+3
  1396  0001D6  CFE1 F008          	movff	fsr1l,??_ISR_HIGH+4
  1397  0001DA  CFE2 F009          	movff	fsr1h,??_ISR_HIGH+5
  1398  0001DE  CFD9 F00A          	movff	fsr2l,??_ISR_HIGH+6
  1399  0001E2  CFDA F00B          	movff	fsr2h,??_ISR_HIGH+7
  1400  0001E6  CFF3 F00C          	movff	prodl,??_ISR_HIGH+8
  1401  0001EA  CFF4 F00D          	movff	prodh,??_ISR_HIGH+9
  1402  0001EE  CFF6 F00E          	movff	tblptrl,??_ISR_HIGH+10
  1403  0001F2  CFF7 F00F          	movff	tblptrh,??_ISR_HIGH+11
  1404  0001F6  CFF8 F010          	movff	tblptru,??_ISR_HIGH+12
  1405  0001FA  CFF5 F011          	movff	tablat,??_ISR_HIGH+13
  1406  0001FE  C03A  F012         	movff	btemp,??_ISR_HIGH+14
  1407  000202  C03B  F013         	movff	btemp+1,??_ISR_HIGH+15
  1408  000206  C03C  F014         	movff	btemp+2,??_ISR_HIGH+16
  1409  00020A  C03D  F015         	movff	btemp+3,??_ISR_HIGH+17
  1410                           
  1411                           ;main.c: 147: if (RCIF) {
  1412  00020E  AA9E               	btfss	3998,5,c	;volatile
  1413  000210  D006               	goto	i2l108
  1414                           
  1415                           ;main.c: 148: if (RCSTAbits.OERR == 1) {
  1416  000212  50AB               	movf	4011,w,c	;volatile
  1417                           
  1418                           ;main.c: 150: }
  1419                           ;main.c: 151: UART_READ();
  1420  000214  EC47  F002         	call	_UART_READ	;wreg free
  1421                           
  1422                           ;main.c: 152: UART_WRITE(temp);
  1423  000218  5039               	movf	_temp,w,c
  1424  00021A  EC51  F002         	call	_UART_WRITE
  1425  00021E                     i2l108:
  1426                           
  1427                           ;main.c: 153: }
  1428                           ;main.c: 154: return ;
  1429  00021E  C015  F03D         	movff	??_ISR_HIGH+17,btemp+3
  1430  000222  C014  F03C         	movff	??_ISR_HIGH+16,btemp+2
  1431  000226  C013  F03B         	movff	??_ISR_HIGH+15,btemp+1
  1432  00022A  C012  F03A         	movff	??_ISR_HIGH+14,btemp
  1433  00022E  C011  FFF5         	movff	??_ISR_HIGH+13,tablat
  1434  000232  C010  FFF8         	movff	??_ISR_HIGH+12,tblptru
  1435  000236  C00F  FFF7         	movff	??_ISR_HIGH+11,tblptrh
  1436  00023A  C00E  FFF6         	movff	??_ISR_HIGH+10,tblptrl
  1437  00023E  C00D  FFF4         	movff	??_ISR_HIGH+9,prodh
  1438  000242  C00C  FFF3         	movff	??_ISR_HIGH+8,prodl
  1439  000246  C00B  FFDA         	movff	??_ISR_HIGH+7,fsr2h
  1440  00024A  C00A  FFD9         	movff	??_ISR_HIGH+6,fsr2l
  1441  00024E  C009  FFE2         	movff	??_ISR_HIGH+5,fsr1h
  1442  000252  C008  FFE1         	movff	??_ISR_HIGH+4,fsr1l
  1443  000256  C007  FFEA         	movff	??_ISR_HIGH+3,fsr0h
  1444  00025A  C006  FFE9         	movff	??_ISR_HIGH+2,fsr0l
  1445  00025E  C005  FFFB         	movff	??_ISR_HIGH+1,pclatu
  1446  000262  C004  FFFA         	movff	??_ISR_HIGH,pclath
  1447  000266  923A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1448  000268  0011               	retfie		f
  1449  00026A                     __end_of_ISR_HIGH:
  1450                           	opt stack 0
  1451                           pclatu	equ	0xFFB
  1452                           pclath	equ	0xFFA
  1453                           tblptru	equ	0xFF8
  1454                           tblptrh	equ	0xFF7
  1455                           tblptrl	equ	0xFF6
  1456                           tablat	equ	0xFF5
  1457                           prodh	equ	0xFF4
  1458                           prodl	equ	0xFF3
  1459                           intcon	equ	0xFF2
  1460                           postinc0	equ	0xFEE
  1461                           fsr0h	equ	0xFEA
  1462                           fsr0l	equ	0xFE9
  1463                           wreg	equ	0xFE8
  1464                           postdec1	equ	0xFE5
  1465                           fsr1h	equ	0xFE2
  1466                           fsr1l	equ	0xFE1
  1467                           bsr	equ	0xFE0
  1468                           indf2	equ	0xFDF
  1469                           fsr2h	equ	0xFDA
  1470                           fsr2l	equ	0xFD9
  1471                           status	equ	0xFD8
  1472                           
  1473 ;; *************** function _UART_WRITE *****************
  1474 ;; Defined at:
  1475 ;;		line 98 in file "main.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  output          1    wreg     unsigned char 
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  output          1    0[COMRAM] unsigned char 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1489 ;;      Params:         0       0       0       0       0       0       0
  1490 ;;      Locals:         1       0       0       0       0       0       0
  1491 ;;      Temps:          0       0       0       0       0       0       0
  1492 ;;      Totals:         1       0       0       0       0       0       0
  1493 ;;Total ram usage:        1 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_ISR_HIGH
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text10
  1503  0004A2                     __ptext10:
  1504                           	opt stack 0
  1505  0004A2                     _UART_WRITE:
  1506                           	opt stack 25
  1507                           
  1508                           ;incstack = 0
  1509                           ;UART_WRITE@output stored from wreg
  1510  0004A2  6E01               	movwf	UART_WRITE@output,c
  1511                           
  1512                           ;main.c: 99: TXREG = output;
  1513  0004A4  C001  FFAD         	movff	UART_WRITE@output,4013	;volatile
  1514  0004A8  0012               	return	
  1515  0004AA                     __end_of_UART_WRITE:
  1516                           	opt stack 0
  1517                           pclatu	equ	0xFFB
  1518                           pclath	equ	0xFFA
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           prodh	equ	0xFF4
  1524                           prodl	equ	0xFF3
  1525                           intcon	equ	0xFF2
  1526                           postinc0	equ	0xFEE
  1527                           fsr0h	equ	0xFEA
  1528                           fsr0l	equ	0xFE9
  1529                           wreg	equ	0xFE8
  1530                           postdec1	equ	0xFE5
  1531                           fsr1h	equ	0xFE2
  1532                           fsr1l	equ	0xFE1
  1533                           bsr	equ	0xFE0
  1534                           indf2	equ	0xFDF
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8
  1538                           
  1539 ;; *************** function _UART_READ *****************
  1540 ;; Defined at:
  1541 ;;		line 103 in file "main.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1555 ;;      Params:         0       0       0       0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0
  1558 ;;      Totals:         0       0       0       0       0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    2
  1562 ;; This function calls:
  1563 ;;		i2_add_word
  1564 ;; This function is called by:
  1565 ;;		_ISR_HIGH
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text11
  1570  00048E                     __ptext11:
  1571                           	opt stack 0
  1572  00048E                     _UART_READ:
  1573                           	opt stack 23
  1574                           
  1575                           ;main.c: 104: temp = RCREG;
  1576                           
  1577                           ;incstack = 0
  1578  00048E  CFAE F039          	movff	4014,_temp	;volatile
  1579                           
  1580                           ;main.c: 107: add_word(temp);
  1581  000492  5039               	movf	_temp,w,c
  1582  000494  EC05  F002         	call	i2_add_word
  1583  000498  0012               	return	
  1584  00049A                     __end_of_UART_READ:
  1585                           	opt stack 0
  1586                           pclatu	equ	0xFFB
  1587                           pclath	equ	0xFFA
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           intcon	equ	0xFF2
  1595                           postinc0	equ	0xFEE
  1596                           fsr0h	equ	0xFEA
  1597                           fsr0l	equ	0xFE9
  1598                           wreg	equ	0xFE8
  1599                           postdec1	equ	0xFE5
  1600                           fsr1h	equ	0xFE2
  1601                           fsr1l	equ	0xFE1
  1602                           bsr	equ	0xFE0
  1603                           indf2	equ	0xFDF
  1604                           fsr2h	equ	0xFDA
  1605                           fsr2l	equ	0xFD9
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function i2_add_word *****************
  1609 ;; Defined at:
  1610 ;;		line 79 in file "main.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  c               1    wreg     unsigned char 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  c               1    2[COMRAM] unsigned char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1624 ;;      Params:         0       0       0       0       0       0       0
  1625 ;;      Locals:         1       0       0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0
  1627 ;;      Totals:         1       0       0       0       0       0       0
  1628 ;;Total ram usage:        1 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    1
  1631 ;; This function calls:
  1632 ;;		i2_next
  1633 ;; This function is called by:
  1634 ;;		_UART_READ
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text12
  1639  00040A                     __ptext12:
  1640                           	opt stack 0
  1641  00040A                     i2_add_word:
  1642                           	opt stack 23
  1643                           
  1644                           ;incstack = 0
  1645                           ;i2add_word@c stored from wreg
  1646  00040A  6E03               	movwf	i2add_word@c,c
  1647                           
  1648                           ;main.c: 80: *now = c;
  1649  00040C  C037  FFD9         	movff	_now,fsr2l
  1650  000410  C038  FFDA         	movff	_now+1,fsr2h
  1651  000414  C003  FFDF         	movff	i2add_word@c,indf2
  1652                           
  1653                           ;main.c: 81: now = next(now);
  1654  000418  C037  F001         	movff	_now,i2next@ptr
  1655  00041C  C038  F002         	movff	_now+1,i2next@ptr+1
  1656  000420  ECE0  F001         	call	i2_next	;wreg free
  1657  000424  C001  F037         	movff	?i2_next,_now
  1658  000428  C002  F038         	movff	?i2_next+1,_now+1
  1659  00042C  0012               	return		;funcret
  1660  00042E                     __end_ofi2_add_word:
  1661                           	opt stack 0
  1662                           pclatu	equ	0xFFB
  1663                           pclath	equ	0xFFA
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           prodh	equ	0xFF4
  1669                           prodl	equ	0xFF3
  1670                           intcon	equ	0xFF2
  1671                           postinc0	equ	0xFEE
  1672                           fsr0h	equ	0xFEA
  1673                           fsr0l	equ	0xFE9
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1h	equ	0xFE2
  1677                           fsr1l	equ	0xFE1
  1678                           bsr	equ	0xFE0
  1679                           indf2	equ	0xFDF
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           status	equ	0xFD8
  1683                           
  1684 ;; *************** function i2_next *****************
  1685 ;; Defined at:
  1686 ;;		line 84 in file "main.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  1689 ;;		 -> data(250), 
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;		None
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  2    0[COMRAM] PTR unsigned char 
  1694 ;; Registers used:
  1695 ;;		wreg, status,2, status,0
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1701 ;;      Params:         2       0       0       0       0       0       0
  1702 ;;      Locals:         0       0       0       0       0       0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0
  1704 ;;      Totals:         2       0       0       0       0       0       0
  1705 ;;Total ram usage:        2 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; This function calls:
  1708 ;;		Nothing
  1709 ;; This function is called by:
  1710 ;;		i2_add_word
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text13
  1715  0003C0                     __ptext13:
  1716                           	opt stack 0
  1717  0003C0                     i2_next:
  1718                           	opt stack 23
  1719                           
  1720                           ;main.c: 85: if(++ptr == tail)
  1721                           
  1722                           ;incstack = 0
  1723  0003C0  4A01               	infsnz	i2next@ptr,f,c
  1724  0003C2  2A02               	incf	i2next@ptr+1,f,c
  1725  0003C4  5035               	movf	_tail,w,c
  1726  0003C6  1801               	xorwf	i2next@ptr,w,c
  1727  0003C8  E109               	bnz	i2l871
  1728  0003CA  5036               	movf	_tail+1,w,c
  1729  0003CC  1802               	xorwf	i2next@ptr+1,w,c
  1730  0003CE  A4D8               	btfss	status,2,c
  1731  0003D0  D005               	goto	i2l87
  1732                           
  1733                           ;main.c: 86: return (char*)data;
  1734  0003D2  0E00               	movlw	low _data
  1735  0003D4  6E01               	movwf	?i2_next,c
  1736  0003D6  0E01               	movlw	high _data
  1737  0003D8  6E02               	movwf	?i2_next+1,c
  1738  0003DA  0012               	return	
  1739  0003DC                     i2l87:
  1740  0003DC                     i2l871:
  1741                           
  1742                           ;main.c: 87: return ptr;
  1743  0003DC  C001  F001         	movff	i2next@ptr,?i2_next
  1744  0003E0  C002  F002         	movff	i2next@ptr+1,?i2_next+1
  1745  0003E4  0012               	return	
  1746  0003E6                     __end_ofi2_next:
  1747                           	opt stack 0
  1748  0000                     pclatu	equ	0xFFB
  1749                           pclath	equ	0xFFA
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           prodh	equ	0xFF4
  1755                           prodl	equ	0xFF3
  1756                           intcon	equ	0xFF2
  1757                           postinc0	equ	0xFEE
  1758                           fsr0h	equ	0xFEA
  1759                           fsr0l	equ	0xFE9
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1h	equ	0xFE2
  1763                           fsr1l	equ	0xFE1
  1764                           bsr	equ	0xFE0
  1765                           indf2	equ	0xFDF
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           status	equ	0xFD8
  1769                           pclatu	equ	0xFFB
  1770                           pclath	equ	0xFFA
  1771                           tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           prodh	equ	0xFF4
  1776                           prodl	equ	0xFF3
  1777                           intcon	equ	0xFF2
  1778                           postinc0	equ	0xFEE
  1779                           fsr0h	equ	0xFEA
  1780                           fsr0l	equ	0xFE9
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1h	equ	0xFE2
  1784                           fsr1l	equ	0xFE1
  1785                           bsr	equ	0xFE0
  1786                           indf2	equ	0xFDF
  1787                           fsr2h	equ	0xFDA
  1788                           fsr2l	equ	0xFD9
  1789                           status	equ	0xFD8
  1790                           
  1791                           	psect	rparam
  1792  0000                     pclatu	equ	0xFFB
  1793                           pclath	equ	0xFFA
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           prodh	equ	0xFF4
  1799                           prodl	equ	0xFF3
  1800                           intcon	equ	0xFF2
  1801                           postinc0	equ	0xFEE
  1802                           fsr0h	equ	0xFEA
  1803                           fsr0l	equ	0xFE9
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1h	equ	0xFE2
  1807                           fsr1l	equ	0xFE1
  1808                           bsr	equ	0xFE0
  1809                           indf2	equ	0xFDF
  1810                           fsr2h	equ	0xFDA
  1811                           fsr2l	equ	0xFD9
  1812                           status	equ	0xFD8
  1813                           
  1814                           	psect	temp
  1815  00003A                     btemp:
  1816                           	opt stack 0
  1817  00003A                     	ds	1
  1818  0000                     int$flags	set	btemp
  1819  0000                     wtemp6	set	btemp+1
  1820                           pclatu	equ	0xFFB
  1821                           pclath	equ	0xFFA
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           intcon	equ	0xFF2
  1829                           postinc0	equ	0xFEE
  1830                           fsr0h	equ	0xFEA
  1831                           fsr0l	equ	0xFE9
  1832                           wreg	equ	0xFE8
  1833                           postdec1	equ	0xFE5
  1834                           fsr1h	equ	0xFE2
  1835                           fsr1l	equ	0xFE1
  1836                           bsr	equ	0xFE0
  1837                           indf2	equ	0xFDF
  1838                           fsr2h	equ	0xFDA
  1839                           fsr2l	equ	0xFD9
  1840                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        254
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     52      57
    BANK0           128      0       0
    BANK1           256      0     250
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    next@ptr	PTR unsigned char  size(2) Largest target is 250
		 -> data(BANK1[250]), 

    sp__next	PTR unsigned char  size(2) Largest target is 250
		 -> data(BANK1[250]), 

    show_words@iter	PTR unsigned char  size(2) Largest target is 250
		 -> data(BANK1[250]), 

    tail	PTR unsigned char  size(2) Largest target is 250
		 -> data(BANK1[250]), 

    now	PTR unsigned char  size(2) Largest target is 250
		 -> data(BANK1[250]), 


Critical Paths under _main in COMRAM

    _main->_show_words
    _show_words->_next
    _LED_DISP->_add_word
    _add_word->_next

Critical Paths under _ISR_LOW in COMRAM

    None.

Critical Paths under _ISR_HIGH in COMRAM

    _UART_READ->i2_add_word
    i2_add_word->i2_next

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_LOW in BANK0

    None.

Critical Paths under _ISR_HIGH in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_LOW in BANK1

    None.

Critical Paths under _ISR_HIGH in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_LOW in BANK2

    None.

Critical Paths under _ISR_HIGH in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_LOW in BANK3

    None.

Critical Paths under _ISR_HIGH in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_LOW in BANK4

    None.

Critical Paths under _ISR_HIGH in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_LOW in BANK5

    None.

Critical Paths under _ISR_HIGH in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     582
                           _ISR_INIT
                           _LED_DISP
                          _UART_INIT
                         _show_words
                               _test
 ---------------------------------------------------------------------------------
 (1) _test                                                 8     8      0      30
                                             42 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _show_words                                           8     8      0     334
                                             44 COMRAM     8     8      0
                               _next
 ---------------------------------------------------------------------------------
 (1) _UART_INIT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_DISP                                             0     0      0     218
                           _add_word
 ---------------------------------------------------------------------------------
 (2) _add_word                                             1     1      0     218
                                             44 COMRAM     1     1      0
                               _next
 ---------------------------------------------------------------------------------
 (2) _next                                                 2     0      2     196
                                             42 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ISR_INIT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR_LOW                                             21    21      0       0
                                             21 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR_HIGH                                            18    18      0     107
                                              3 COMRAM    18    18      0
                          _UART_READ
                         _UART_WRITE
 ---------------------------------------------------------------------------------
 (6) _UART_WRITE                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _UART_READ                                            0     0      0      92
                         i2_add_word
 ---------------------------------------------------------------------------------
 (7) i2_add_word                                           1     1      0      92
                                              2 COMRAM     1     1      0
                             i2_next
 ---------------------------------------------------------------------------------
 (8) i2_next                                               2     0      2      70
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ISR_INIT
   _LED_DISP
     _add_word
       _next
   _UART_INIT
   _show_words
     _next
   _test

 _ISR_LOW (ROOT)

 _ISR_HIGH (ROOT)
   _UART_READ
     i2_add_word
       i2_next
   _UART_WRITE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FA       7       97.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     34      39       1       45.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     133      15        0.0%
DATA                 0      0     133       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 19 00:40:02 2017

                     l54 02F4                       l64 0444                       l73 028A  
                     l81 02E0                       l57 032A                       l67 044A  
                     l76 029E                       l87 03B6                       l79 02B6  
                     bsr 000FE0               i2_add_word 040A                      l901 02B6  
                    l861 03B6                      l773 032A                      l769 02F4  
                    l897 029E                      l889 027A                      _now 0037  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   _LATA 000F89                     _RCIF 007CF5                     i2l87 03DC  
        __end_of_ISR_LOW 00C6                     _data 0100                     _main 042E  
                   _tail 0035                     _next 039A                     _temp 0039  
                   _test 02E2                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 003A  
                   prodh 000FF4                     prodl 000FF3                     start 00C6  
          __CFG_MCLRE$ON 000000             ___param_bank 000000         __end_of_LED_DISP 0470  
            i2add_word@c 0003                    ?_main 0001                    ?_next 002B  
                  ?_test 0001                    i2l108 021E                    i2l871 03DC  
                  _RCREG 000FAE              ?_UART_WRITE 0001         __end_of_ISR_HIGH 026A  
                  _SPBRG 000FAF         __end_of_ISR_INIT 04A2                    _TRISA 000F92  
                  _TRISD 000F95                    _TXREG 000FAD       __size_of_UART_INIT 001E  
     __size_of_UART_READ 000C                    pclath 000FFA                    tablat 000FF5  
                  status 000FD8                    wtemp6 003B          __initialization 034E  
           __end_of_main 0450             __end_of_next 03C0             __end_of_test 034E  
                 ??_main 0035                   ??_next 002D                   ??_test 002B  
            ?i2_add_word 0001            __activetblptr 000000                ??_ISR_LOW 0016  
       __end_of_add_word 040A                   i2_next 03C0      __size_of_UART_WRITE 0008  
      __end_of_UART_INIT 048E        __end_of_UART_READ 049A             __pdataCOMRAM 0035  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       show_words@bright 002D                ?_LED_DISP 0001               __accesstop 0080  
__end_of__initialization 0390          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
    __size_ofi2_add_word 0024                ?_ISR_HIGH 0001                ?_ISR_INIT 0001  
         __pcstackCOMRAM 0001             __pidataBANK1 00CA           show_words@dark 002F  
         show_words@iter 0031               ??_LED_DISP 002E                  ?i2_next 0001  
             ??_ISR_HIGH 0004               ??_ISR_INIT 002B                ?_add_word 0001  
           ??_UART_WRITE 0001                  _ISR_LOW 0018          __size_ofi2_next 0026  
                __Hparam 0000                  __Lparam 0000       __end_of_UART_WRITE 04AA  
                __pcinit 034E                  __ramtop 0600                  __ptext0 042E  
                __ptext1 02E2                  __ptext2 026A                  __ptext3 0470  
                __ptext4 0450                  __ptext5 03E6                  __ptext6 039A  
                __ptext7 049A             ??i2_add_word 0003               ??_add_word 002D  
         __pintcode_body 01C4     end_of_initialization 0390                  int_func 01C4  
                next@ptr 002B       __end_ofi2_add_word 042E                _RCSTAbits 000FAB  
                postdec1 000FE5                  postinc0 000FEE                _UART_INIT 0470  
              _UART_READ 048E               _show_words 026A                _TRISCbits 000F94  
              _TXSTAbits 000FAC        __size_of_LED_DISP 0020           __end_ofi2_next 03E6  
            show_words@i 0033        __size_of_ISR_HIGH 0262        __size_of_ISR_INIT 0008  
             ?_UART_INIT 0001               ?_UART_READ 0001              _BAUDCONbits 000FB8  
          __pidataCOMRAM 04AA                i2next@ptr 0001      start_initialization 034E  
       __CFG_OSC$INTIO67 000000                 ??i2_next 0003              __pdataBANK1 0100  
            ?_show_words 0001              __pbssCOMRAM 0039        __size_of_add_word 0024  
               ?_ISR_LOW 0001                __pintcode 0008                add_word@c 002D  
            ??_UART_INIT 002B              ??_UART_READ 0004              __pintcodelo 0018  
               _LED_DISP 0450                 _IPR1bits 000F9F                 _PIE1bits 000F9D  
             test@bright 002B      __size_of_show_words 0078                 _ISR_HIGH 0008  
               _ISR_INIT 049A                 _RCONbits 000FD0         __size_of_ISR_LOW 00AE  
              copy_data0 0362                copy_data1 0382                 __Hrparam 0000  
               __Lrparam 0000                 _add_word 03E6                 __ptext10 04A2  
               __ptext11 048E                 __ptext12 040A                 __ptext13 03C0  
          __size_of_main 0022            __size_of_next 0026            __size_of_test 006C  
               int$flags 003A             ??_show_words 002D               _INTCONbits 000FF2  
               intlevel1 0000                 intlevel2 0000               _OSCCONbits 000FD3  
               test@dark 002F       __end_of_show_words 02E2         UART_WRITE@output 0001  
             _UART_WRITE 04A2  
